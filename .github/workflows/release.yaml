name: Release

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release tag'
        required: true

env:
  VERSION: ${{ inputs.releaseTag }}

jobs:
  #BuildAndPushDockerImages:
  #  strategy:
  #    matrix:
  #      image:
  #        - amd64
  #        - arm32v7
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: docker/setup-qemu-action@v2
  #    - uses: docker/setup-buildx-action@v2
  #      id: buildx
  #      with:
  #        install: true
  #    - name: Login to docker hub
  #      run: |
  #        docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
  #    - name: Build and push images
  #      run: |
  #        docker buildx build -f "./LoRaEngine/modules/LoRaWanNetworkSrvModule/Dockerfile.${{ matrix.image }}" -t $DOCKERHUB_ORGANISATION/lorawannetworksrvmodule:$VERSION-${{ matrix.image }} --output type=image,push=true "."
  #        docker buildx build -f "./LoRaEngine/modules/LoRaBasicsStationModule/Dockerfile.${{ matrix.image }}" -t $DOCKERHUB_ORGANISATION/lorabasicsstationmodule:$VERSION-${{ matrix.image }} --build-arg SOURCE_CONTAINER_REGISTRY_ADDRESS=docker.io --output type=image,push=true "."
  #    - name: Create manifests
  #      run: |
  #        docker manifest create $DOCKERHUB_ORGANISATION/lorawannetworksrvmodule:$VERSION $DOCKERHUB_ORGANISATION/lorawannetworksrvmodule:$VERSION-${{ matrix.image }} --amend
  #        docker manifest create $DOCKERHUB_ORGANISATION/lorabasicsstationmodule:$VERSION $DOCKERHUB_ORGANISATION/lorabasicsstationmodule:$VERSION-${{ matrix.image }} --amend
  #        docker manifest push $DOCKERHUB_ORGANISATION/lorabasicsstationmodule:$VERSION
  #        docker manifest push $DOCKERHUB_ORGANISATION/lorawannetworksrvmodule:$VERSION
  #  env: 
  #    DOCKERHUB_ORGANISATION: "ouphi"

  CreateRelease:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package Azure Function
        run: |
          dotnet publish LoRaEngine/LoraKeysManagerFacade -c Release
          zip -r $FUNCTION_ZIP LoRaEngine/LoraKeysManagerFacade/bin/Release/net6.0
      - name: Package Discovery Service
        run: |
          dotnet publish LoRaEngine/modules/LoRaWan.NetworkServerDiscovery/LoRaWan.NetworkServerDiscovery.csproj -c Release
          PUBLISH_FOLDER=LoRaEngine/modules/LoRaWan.NetworkServerDiscovery/bin/Release/net6.0/publish
          zip -r $DISCOVERY_SERVICE_ZIP $PUBLISH_FOLDER
      - name: Generate ARM file
        working-directory: TemplateBicep
        run: |
          az bicep build --file main.bicep
          az bicep build --file main.bicep --outfile $ARM_FILE
      - name: Compile provisioning CLI
        run: |
          
      - name: Release
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release create v$VERSION TemplateBicep/$ARM_FILE $FUNCTION_ZIP $DISCOVERY_SERVICE_ZIP --title 'Release v${VERSION}' --prerelease --repo ${{ github.repository }} --notes ""
    #needs: BuildAndPushDockerImages
    env:
      ARM_FILE: azuredeploy.json
      FUNCTION_ZIP: function-${{ env.VERSION }}.zip
      DISCOVERY_SERVICE_ZIP: discoveryservice-${{ env.VERSION }}.beta1.zip
    